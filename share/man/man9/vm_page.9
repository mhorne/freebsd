.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.\" Copyright (c) 2023 The FreeBSD Foundation
.\"
.\" This manual page was written by Mitchell Horne <mhorne@FreeBSD.org> under
.\" sponsorship from the FreeBSD Foundation.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd July 11, 2023
.Dt VM_PAGE 9
.Os
.Sh NAME
.Nm vm_page ,
.Nm vm_page_t
.Nd "virtual memory page structure"
.Sh SYNOPSIS
.In sys/param.h
.In vm/vm.h
.In vm/vm_page.h
.Bd -literal
struct vm_page;
.Ed
.Vt typedef "struct vm_page *vm_page_t" ;
.Sh DESCRIPTION
The
.Vt vm_page
structure is the logical representation of a virtual memory page.
Every page of resident physical memory that is not reserved from the VM
subsystem has a corresponding
.Vt vm_page_t .
Higher-level memory allocators such as
.Xr uma 9
will consume
.Vt vm_page_t
structures.
.Pp
A
.Vt vm_page_t
in active use will most commonly belong to a specific VM object
.Po
.Vt vm_object_t
.Pc .
Depending on the purpose of the object, the page will have corresponding
virtual address mappings in one or more separate virtual address spaces.
.Pp
When not in active use, VM pages may exist on one of several free lists.
.Pp
VM pages are created with an initial page size matching the platform-dependent
.Dv PAGE_SIZE
macro, which most often corresponds to the smallest page-granularity supported
by the CPU.
If supported by the underlying hardware, the VM page may be configured to
represent a larger page size (superpage).
This is indicated by the
.Va psind
member of
.Vt struct vm_page ,
an index into the
.Va pagesizes[]
array.
.Pp
The actual virtual-to-physical address mappings for a memory page are managed
by the machine-dependent
.Xr pmap 9
(physical map) module.
Some of its routines operate on
.Vt vm_page_t
objects, for example
.Xr pmap_enter 9 .
.Vt struct vm_page
contains a
.Vt struct md_page
sub-structure which is machine-dependent, for use within the
.Xr pmap 9
module.
.Sh SEE ALSO
.Xr pmap 9 ,
.Xr vm_page_advise 9 ,
.Xr vm_page_alloc 9 ,
.Xr vm_page_bits
.Xr vm_page_aflag 9 ,
.Xr vm_page_alloc 9 ,
.Xr vm_page_bits 9 ,
.Xr vm_page_busy 9 ,
.Xr vm_page_deactivate 9 ,
.Xr vm_page_free 9 ,
.Xr vm_page_grab 9 ,
.Xr vm_page_insert 9 ,
.Xr vm_page_lookup 9 ,
.Xr vm_page_rename 9 ,
.Xr vm_page_sbusy 9 ,
.Xr vm_page_wire 9
